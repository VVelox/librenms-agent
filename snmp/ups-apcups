#!/usr/bin/env perl
# Author: Zane C. Bowers-Hadley <vvelox@vvelox.net>

# https://docs.librenms.org/#Extensions/Applications/#ups-apcups
# See the above for additional information not documented in the POD below.

use strict;
use warnings;
use Getopt::Std;
use JSON;

# should be no reason to change this
# better to use env to make sure it is in your path when you run this
my $apcaccess='apcaccess';

$Getopt::Std::STANDARD_HELP_VERSION = 1;
sub main::VERSION_MESSAGE {
        print "ups-apcups SNMP extend 0.0.0\n";
};

sub main::HELP_MESSAGE {
        print "\n";
}

#gets the options
my %opts=();
getopts('p', \%opts);

#holds what will be returned
my %data;
my %toReturn;

# get the current status from apcupsd
my $apcaccess_output=`$apcaccess`;
$toReturn{error}=$?;

# check for bad exit codes
if ( $? == -1){
	$toReturn{errorString}='failed to run apcaccess';
}
elsif ($? & 127) {
	$toReturn{errorString}= sprintf "apcaccess died with signal %d, %s coredump\n",
		($? & 127),  ($? & 128) ? 'with' : 'without';
} else {
		$toReturn{error}=$? >> 8;
		$toReturn{errorString}="apcaccess exited with ".$toReturn{error};
}

# if no bad exit codes, we can process $apcaccess_output
if ( $toReturn{error} == 0 ){
	# holds the found data for the apcupsd status
	my %status;

	# pulls apart the output
	my @lines=split(/\n/, $apcaccess_output);
	foreach my $line ( @lines ){
		my ( $var, $val )=split(/\ *\:\ */, $line, 2);
		$status{$var}=$val;
	}

	#pull the desired variables from the output
	$data{charge}=$status{BCHARGE};
	$data{time_remaining}=$status{TIMELEFT};
	$data{battery_nominal}=$status{NOMBATTV};
	$data{battery_voltage}=$status{BATTV};
	$data{input_voltage}=$status{LINEV};
	$data{nominal_voltage}=$status{NOMINV};
	$data{load}=$status{LOADPCT};
}

# add the data to be return to the return hah
$toReturn{data}=\%data;

# convert $toReturn to JSON and pretty print if asked to
my $j=JSON->new;
if ( $opts{p} ){
        $j->pretty(1);
}
print $j->encode( \%toReturn );
if (! $opts{p} ){
        print "\n";
}
exit 0;
